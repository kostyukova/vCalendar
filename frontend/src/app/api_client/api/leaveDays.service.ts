/**
 * Swagger Vacation calendar
 * This is Vacarion Calendar API description
 *
 * OpenAPI spec version: 1.0.0
 * Contact: w.kostyukova@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ApiResponse } from '../model/apiResponse';
import { ApiResponseConflict } from '../model/apiResponseConflict';
import { LeaveDays } from '../model/leaveDays';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class LeaveDaysService {

    protected basePath = 'https://localhost:8080/vcalendar';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Add a employee LeaveDays to the system. Role write:leave_days must be granted
     *
     * @param body LeaveDays object that needs to be added to the system
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addLeaveDays(body: LeaveDays, observe?: 'body', reportProgress?: boolean): Observable<LeaveDays>;
    public addLeaveDays(body: LeaveDays, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<LeaveDays>>;
    public addLeaveDays(body: LeaveDays, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<LeaveDays>>;
    public addLeaveDays(body: LeaveDays, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling addLeaveDays.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json; charset=utf-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json; charset=utf-8'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<LeaveDays>(`${this.basePath}/employee/leave_days`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes a LeaveDays. Role write:leave_days must be granteds
     *
     * @param id LeaveDays id to delete
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteLeaveDays(id: number, observe?: 'body', reportProgress?: boolean): Observable<ApiResponse>;
    public deleteLeaveDays(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApiResponse>>;
    public deleteLeaveDays(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApiResponse>>;
    public deleteLeaveDays(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteLeaveDays.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json; charset=utf-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<ApiResponse>(`${this.basePath}/employee/leave_days/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Finds LeaveDays by employee
     *
     * @param employeeId Employee id to filter by
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findEmployeeLeaveDays(employeeId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<LeaveDays>>;
    public findEmployeeLeaveDays(employeeId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<LeaveDays>>>;
    public findEmployeeLeaveDays(employeeId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<LeaveDays>>>;
    public findEmployeeLeaveDays(employeeId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (employeeId === null || employeeId === undefined) {
            throw new Error('Required parameter employeeId was null or undefined when calling findEmployeeLeaveDays.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json; charset=utf-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<LeaveDays>>(`${this.basePath}/employee/${encodeURIComponent(String(employeeId))}/leave_days/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Finds LeaveDays by given parameters
     *
     * @param employeeId Employee id to filter by
     * @param startDate Start date to filter by
     * @param endDate End date to filter by
     * @param year Year to filter by
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findLeaveDaysBy(employeeId?: number, startDate?: string, endDate?: string, year?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<LeaveDays>>;
    public findLeaveDaysBy(employeeId?: number, startDate?: string, endDate?: string, year?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<LeaveDays>>>;
    public findLeaveDaysBy(employeeId?: number, startDate?: string, endDate?: string, year?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<LeaveDays>>>;
    public findLeaveDaysBy(employeeId?: number, startDate?: string, endDate?: string, year?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (employeeId !== undefined && employeeId !== null) {
            queryParameters = queryParameters.set('employee_id', <any>employeeId);
        }
        if (startDate !== undefined && startDate !== null) {
            queryParameters = queryParameters.set('start_date', <any>startDate);
        }
        if (endDate !== undefined && endDate !== null) {
            queryParameters = queryParameters.set('end_date', <any>endDate);
        }
        if (year !== undefined && year !== null) {
            queryParameters = queryParameters.set('year', <any>year);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json; charset=utf-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<LeaveDays>>(`${this.basePath}/employee/leave_days/findBy`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Finds unique LeaveDays by employee and leave date
     *
     * @param employeeId Employee id to filter by
     * @param leaveDate Leave date to filter by
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findLeaveDaysByDate(employeeId: number, leaveDate: string, observe?: 'body', reportProgress?: boolean): Observable<LeaveDays>;
    public findLeaveDaysByDate(employeeId: number, leaveDate: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<LeaveDays>>;
    public findLeaveDaysByDate(employeeId: number, leaveDate: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<LeaveDays>>;
    public findLeaveDaysByDate(employeeId: number, leaveDate: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (employeeId === null || employeeId === undefined) {
            throw new Error('Required parameter employeeId was null or undefined when calling findLeaveDaysByDate.');
        }

        if (leaveDate === null || leaveDate === undefined) {
            throw new Error('Required parameter leaveDate was null or undefined when calling findLeaveDaysByDate.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json; charset=utf-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<LeaveDays>(`${this.basePath}/employee/${encodeURIComponent(String(employeeId))}/leave_days/${encodeURIComponent(String(leaveDate))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find LeaveDays by ID
     * Returns a single LeaveDays.
     * @param id ID of LeaveDays to return
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getLeaveDaysById(id: number, observe?: 'body', reportProgress?: boolean): Observable<LeaveDays>;
    public getLeaveDaysById(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<LeaveDays>>;
    public getLeaveDaysById(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<LeaveDays>>;
    public getLeaveDaysById(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getLeaveDaysById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json; charset=utf-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<LeaveDays>(`${this.basePath}/employee/leave_days/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates a LeaveDays in the system with form data. Role write:leave_days must be granted
     *
     * @param id ID of LeaveDays to return
     * @param body LeaveDays object that needs to be updated in the system
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateLeaveDaysById(id: number, body: LeaveDays, observe?: 'body', reportProgress?: boolean): Observable<LeaveDays>;
    public updateLeaveDaysById(id: number, body: LeaveDays, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<LeaveDays>>;
    public updateLeaveDaysById(id: number, body: LeaveDays, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<LeaveDays>>;
    public updateLeaveDaysById(id: number, body: LeaveDays, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateLeaveDaysById.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateLeaveDaysById.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json; charset=utf-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json; charset=utf-8'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<LeaveDays>(`${this.basePath}/employee/leave_days/${encodeURIComponent(String(id))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
