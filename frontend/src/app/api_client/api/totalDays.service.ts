/**
 * Swagger Vacation calendar
 * This is Vacarion Calendar API description
 *
 * OpenAPI spec version: 1.0.0
 * Contact: w.kostyukova@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ApiResponse } from '../model/apiResponse';
import { TotalDays } from '../model/totalDays';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class TotalDaysService {

    protected basePath = 'https://localhost:8080/vcalendar';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Add a employee total days to the system. Role write:total_days must be granted
     *
     * @param body TotalDays object that needs to be added to the system
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addTotalDays(body: TotalDays, observe?: 'body', reportProgress?: boolean): Observable<TotalDays>;
    public addTotalDays(body: TotalDays, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TotalDays>>;
    public addTotalDays(body: TotalDays, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TotalDays>>;
    public addTotalDays(body: TotalDays, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling addTotalDays.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<TotalDays>(`${this.basePath}/employee/total_days`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes a TotalDays. Role write:total_days must be granteds
     *
     * @param id TotalDays id to delete
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteTotalDays(id: number, observe?: 'body', reportProgress?: boolean): Observable<ApiResponse>;
    public deleteTotalDays(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApiResponse>>;
    public deleteTotalDays(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApiResponse>>;
    public deleteTotalDays(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteTotalDays.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<ApiResponse>(`${this.basePath}/employee/total_days/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Finds TotalDays by employee
     *
     * @param employeeId Employee id to filter by
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findEmployeeTotalDays(employeeId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<TotalDays>>;
    public findEmployeeTotalDays(employeeId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TotalDays>>>;
    public findEmployeeTotalDays(employeeId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TotalDays>>>;
    public findEmployeeTotalDays(employeeId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (employeeId === null || employeeId === undefined) {
            throw new Error('Required parameter employeeId was null or undefined when calling findEmployeeTotalDays.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<TotalDays>>(`${this.basePath}/employee/${encodeURIComponent(String(employeeId))}/total_days/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Finds TotalDays by given parameters
     *
     * @param employeeId Employee id to filter by
     * @param year Year to filter by
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findTotalDaysBy(employeeId?: number, year?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<TotalDays>>;
    public findTotalDaysBy(employeeId?: number, year?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TotalDays>>>;
    public findTotalDaysBy(employeeId?: number, year?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TotalDays>>>;
    public findTotalDaysBy(employeeId?: number, year?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (employeeId !== undefined && employeeId !== null) {
            queryParameters = queryParameters.set('employee_id', <any>employeeId);
        }
        if (year !== undefined && year !== null) {
            queryParameters = queryParameters.set('year', <any>year);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<TotalDays>>(`${this.basePath}/employee/total_days/findBy`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Finds unique TotalDay by employee and year
     *
     * @param employeeId Employee id to filter by
     * @param year Year to filter by
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findTotalDaysByYear(employeeId: number, year: number, observe?: 'body', reportProgress?: boolean): Observable<TotalDays>;
    public findTotalDaysByYear(employeeId: number, year: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TotalDays>>;
    public findTotalDaysByYear(employeeId: number, year: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TotalDays>>;
    public findTotalDaysByYear(employeeId: number, year: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (employeeId === null || employeeId === undefined) {
            throw new Error('Required parameter employeeId was null or undefined when calling findTotalDaysByYear.');
        }

        if (year === null || year === undefined) {
            throw new Error('Required parameter year was null or undefined when calling findTotalDaysByYear.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<TotalDays>(`${this.basePath}/employee/${encodeURIComponent(String(employeeId))}/total_days/${encodeURIComponent(String(year))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find total days by ID
     * Returns a single TotalDays.
     * @param id ID of TotalDays to return
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTotalDaysById(id: number, observe?: 'body', reportProgress?: boolean): Observable<TotalDays>;
    public getTotalDaysById(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TotalDays>>;
    public getTotalDaysById(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TotalDays>>;
    public getTotalDaysById(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getTotalDaysById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<TotalDays>(`${this.basePath}/employee/total_days/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates a TotalDays in the system with form data. Role write:total_days must be granted
     *
     * @param id ID of TotalDays to return
     * @param body TotalDays object that needs to be updated in the system
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateTotalDaysById(id: number, body: TotalDays, observe?: 'body', reportProgress?: boolean): Observable<TotalDays>;
    public updateTotalDaysById(id: number, body: TotalDays, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TotalDays>>;
    public updateTotalDaysById(id: number, body: TotalDays, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TotalDays>>;
    public updateTotalDaysById(id: number, body: TotalDays, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateTotalDaysById.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateTotalDaysById.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<TotalDays>(`${this.basePath}/employee/total_days/${encodeURIComponent(String(id))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
