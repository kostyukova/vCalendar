swagger: "2.0"
info:
  description: "This is Vacarion Calendar API description"
  version: "1.0.0"
  title: "Swagger Vacation calendar"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "w.kostyukova@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:8080"
basePath: "/vcalendar"
tags:
- name: "team"
  description: "Team management"
- name: "employee"
  description: "Employee management"
- name: "total_days"
  description: "Employee total days management"
- name: "leave_days"
  description: "Employee leave days management"
- name: "user"
  description: "User management"
schemes:
- "https"
- "http"
paths:
  /team:
    post:
      tags:
      - "team"
      summary: "Add a new team to the system. Role write:teams must be granted"
      description: ""
      operationId: "addTeam"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Team object that needs to be added to the system"
        required: true
        schema:
          $ref: "#/definitions/Team"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Team"
        409:
          description: "Team already exists conflict"
          schema:
            $ref: "#/definitions/ApiResponse"
        403: 
          description: 'Forbidden'
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - Bearer: []
  /team/findBy:
    get:
      tags:
      - "team"
      summary: "Finds Teams by given parameters"
      description: ""
      operationId: "findTeamBy"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "query"
        description: "Team name template to filter by"
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Team"
        400:
          description: "Invalid params to filter by"
          schema:
            $ref: "#/definitions/ApiResponse"
  /team/findByName/{name}:
    get:
      tags:
      - "team"
      summary: "Finds Team by name"
      description: ""
      operationId: "findTeamByName"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "Team name to find"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Team"
        400:
          description: "Invalid name supplied"
          schema:
            $ref: "#/definitions/ApiResponse"
        404:
          description: "Team not found"
          schema:
            $ref: "#/definitions/ApiResponse"
  /team/{teamId}:
    get:
      tags:
      - "team"
      summary: "Find team by ID"
      description: "Returns a single team."
      operationId: "getTeamById"
      produces:
      - "application/json"
      parameters:
      - name: "teamId"
        in: "path"
        description: "ID of team to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Team"
        400:
          description: "Invalid ID supplied"
          schema:
            $ref: "#/definitions/ApiResponse"
        404:
          description: "Team not found"
          schema:
            $ref: "#/definitions/ApiResponse"
    put:
      tags:
      - "team"
      summary: "Updates a team in the system with form data. Role write:teams must be granted"
      description: ""
      operationId: "updateTeamById"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "teamId"
        in: "path"
        description: "ID of team to return"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Team object that needs to be updated in the system"
        required: true
        schema:
          $ref: "#/definitions/Team"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Team"
        400:
          description: "Invalid ID supplied"
          schema:
            $ref: "#/definitions/ApiResponse"
        404:
          description: "Team not found"
          schema:
            $ref: "#/definitions/ApiResponse"
        405:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/ApiResponse"
        409:
          description: "Team already exists conflict"
          schema:
            $ref: "#/definitions/ApiResponse"
        403: 
          description: 'Forbidden'
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - Bearer: []
    delete:
      tags:
      - "team"
      summary: "Deletes an team. Role write:teams must be granteds"
      description: ""
      operationId: "deleteTeam"
      produces:
      - "application/json"
      parameters:
      - name: "teamId"
        in: "path"
        description: "Team id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "Successful deletion"
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: "Invalid ID supplied"
          schema:
            $ref: "#/definitions/ApiResponse"
        404:
          description: "Team not found"
          schema:
            $ref: "#/definitions/ApiResponse"
        403: 
          description: 'Forbidden'
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - Bearer: []
  /employee:
    post:
      tags:
      - "employee"
      summary: "Add a new employee to the system. Role write:employees must be granted"
      description: ""
      operationId: "addEmployee"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Employee object that needs to be added to the system"
        required: true
        schema:
          $ref: "#/definitions/Employee"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Employee"
        405:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/ApiResponse"
        409:
          description: "Employee already exists conflict"
          schema:
            $ref: "#/definitions/ApiResponse"
        403: 
          description: 'Forbidden'
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - Bearer: []
  /employee/findBy:
    get:
      tags:
      - "employee"
      summary: "Finds Employees by given parameters"
      description: ""
      operationId: "findEmployeesBy"
      produces:
      - "application/json"
      parameters:
      - name: "full_name"
        in: "query"
        description: "Full name template to filter by"
        type: "string"
      - name: "position"
        in: "query"
        description: "Position template to filter by"
        type: "string"
      - name: "specialization"
        in: "query"
        description: "Specialization template to filter by"
        type: "string"
      - name: "expert"
        in: "query"
        description: "Expert mark to filter by"
        type: "boolean"
      - name: "team_id"
        in: "query"
        description: "Team id to filter by"
        type: "integer"
        format: "int32"
      - name: "email"
        in: "query"
        description: "Email template to filter by"
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Employee"
        400:
          description: "Invalid params to filter by"
          schema:
            $ref: "#/definitions/ApiResponse"
  /employee/findByEmail/{email}:
    get:
      tags:
      - "employee"
      summary: "Finds Employee by given email"
      description: ""
      operationId: "findEmployeeByEmail"
      produces:
      - "application/json"
      parameters:
      - name: "email"
        in: "path"
        description: "Unique employee email"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Employee"
        404:
          description: "Employee not found"
          schema:
            $ref: "#/definitions/ApiResponse"
  /employee/{employeeId}:
    get:
      tags:
      - "employee"
      summary: "Find employee by ID"
      description: "Returns a single employee."
      operationId: "getEmployeeById"
      produces:
      - "application/json"
      parameters:
      - name: "employeeId"
        in: "path"
        description: "ID of empoyee to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Employee"
        400:
          description: "Invalid ID supplied"
          schema:
            $ref: "#/definitions/ApiResponse"
        404:
          description: "Employee not found"
          schema:
            $ref: "#/definitions/ApiResponse"
    put:
      tags:
      - "employee"
      summary: "Updates an employee in the system with form data. Role write:employees must be granted"
      description: ""
      operationId: "updateEmployeeById"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "employeeId"
        in: "path"
        description: "ID of empoyee to return"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Employee object that needs to be updated in the system"
        required: true
        schema:
          $ref: "#/definitions/Employee"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Employee"
        400:
          description: "Invalid ID supplied"
          schema:
            $ref: "#/definitions/ApiResponse"
        404:
          description: "Employee not found"
          schema:
            $ref: "#/definitions/ApiResponse"
        405:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/ApiResponse"
        409:
          description: "Employee already exists conflict"
          schema:
            $ref: "#/definitions/ApiResponse"
        403: 
          description: 'Forbidden'
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - Bearer: []
    delete:
      tags:
      - "employee"
      summary: "Deletes an employee. Role write:employees must be granteds"
      description: ""
      operationId: "deleteEmployee"
      produces:
      - "application/json"
      parameters:
      - name: "employeeId"
        in: "path"
        description: "Employee id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "Successful deletion"
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: "Invalid ID supplied"
          schema:
            $ref: "#/definitions/ApiResponse"
        404:
          description: "Employee not found"
          schema:
            $ref: "#/definitions/ApiResponse"
        403: 
          description: 'Forbidden'
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - Bearer: []
  /employee/total_days:
    post:
      tags:
      - "total_days"
      summary: "Add a employee total days to the system. Role write:total_days must be granted"
      description: ""
      operationId: "addTotalDays"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "TotalDays object that needs to be added to the system"
        required: true
        schema:
          $ref: "#/definitions/TotalDays"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/TotalDays"
        409:
          description: "TodalDays already exists conflict"
          schema:
            $ref: "#/definitions/ApiResponse"
        403: 
          description: 'Forbidden'
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - Bearer: []
  /employee/total_days/findBy:
    get:
      tags:
      - "total_days"
      summary: "Finds TotalDays by given parameters"
      description: ""
      operationId: "findTotalDaysBy"
      produces:
      - "application/json"
      parameters:
      - name: "employee_id"
        in: "query"
        description: "Employee id to filter by"
        type: "integer"
      - name: "year"
        in: "query"
        description: "Year to filter by"
        type: "integer"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/TotalDays"
        400:
          description: "Invalid params to filter by"
          schema:
            $ref: "#/definitions/ApiResponse"
  /employee/{employeeId}/total_days/{year}:
    get:
      tags:
      - "total_days"
      summary: "Finds unique TotalDay by employee and year"
      description: ""
      operationId: "findTotalDaysByYear"
      produces:
      - "application/json"
      parameters:
      - name: "employeeId"
        in: "path"
        description: "Employee id to filter by"
        required: true
        type: "integer"
      - name: "year"
        in: "path"
        description: "Year to filter by"
        required: true
        type: "integer"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/TotalDays"
        400:
          description: "Invalid name supplied"
          schema:
            $ref: "#/definitions/ApiResponse"
        404:
          description: "TotalDays not found"
          schema:
            $ref: "#/definitions/ApiResponse"
  /employee/{employeeId}/total_days/:
    get:
      tags:
      - "total_days"
      summary: "Finds TotalDays by employee"
      description: ""
      operationId: "findEmployeeTotalDays"
      produces:
      - "application/json"
      parameters:
      - name: "employeeId"
        in: "path"
        description: "Employee id to filter by"
        required: true
        type: "integer"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/TotalDays"
        404:
          description: "Employee not found"
          schema:
            $ref: "#/definitions/ApiResponse"
  /employee/total_days/{id}:
    get:
      tags:
      - "total_days"
      summary: "Find total days by ID"
      description: "Returns a single TotalDays."
      operationId: "getTotalDaysById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of TotalDays to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/TotalDays"
        400:
          description: "Invalid ID supplied"
          schema:
            $ref: "#/definitions/ApiResponse"
        404:
          description: "TotalDays not found"
          schema:
            $ref: "#/definitions/ApiResponse"
    put:
      tags:
      - "total_days"
      summary: "Updates a TotalDays in the system with form data. Role write:total_days must be granted"
      description: ""
      operationId: "updateTotalDaysById"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of TotalDays to return"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "TotalDays object that needs to be updated in the system"
        required: true
        schema:
          $ref: "#/definitions/TotalDays"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/TotalDays"
        400:
          description: "Invalid ID supplied"
          schema:
            $ref: "#/definitions/ApiResponse"
        404:
          description: "TotalDays not found"
          schema:
            $ref: "#/definitions/ApiResponse"
        405:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/ApiResponse"
        409:
          description: "TotalDays already exists conflict"
          schema:
            $ref: "#/definitions/ApiResponse"
        403: 
          description: 'Forbidden'
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - Bearer: []
    delete:
      tags:
      - "total_days"
      summary: "Deletes a TotalDays. Role write:total_days must be granteds"
      description: ""
      operationId: "deleteTotalDays"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "TotalDays id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "Successful deletion"
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: "Invalid ID supplied"
          schema:
            $ref: "#/definitions/ApiResponse"
        404:
          description: "TotalDays not found"
          schema:
            $ref: "#/definitions/ApiResponse"
        403: 
          description: 'Forbidden'
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - Bearer: []
  /employee/leave_days:
    post:
      tags:
      - "leave_days"
      summary: "Add a employee LeaveDays to the system. Role write:leave_days must be granted"
      description: ""
      operationId: "addLeaveDays"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "LeaveDays object that needs to be added to the system"
        required: true
        schema:
          $ref: "#/definitions/LeaveDays"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/LeaveDays"
        409:
          description: "LeaveDays already exists conflict or rules conflict"
          schema:
            $ref: "#/definitions/ApiResponseConflict"
        403: 
          description: 'Forbidden'
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - Bearer: []
  /employee/leave_days/findBy:
    get:
      tags:
      - "leave_days"
      summary: "Finds LeaveDays by given parameters"
      description: ""
      operationId: "findLeaveDaysBy"
      produces:
      - "application/json"
      parameters:
      - name: "employee_id"
        in: "query"
        description: "Employee id to filter by"
        type: "integer"
      - name: "start_date"
        in: "query"
        description: "Start date to filter by"
        type: "string"
        format: "date"
      - name: "end_date"
        in: "query"
        description: "End date to filter by"
        type: "string"
        format: "date"
      - name: "year"
        in: "query"
        description: "Year to filter by"
        type: "integer"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/LeaveDays"
        400:
          description: "Invalid params to filter by"
          schema:
            $ref: "#/definitions/ApiResponse"
  /employee/{employeeId}/leave_days/{leave_date}:
    get:
      tags:
      - "leave_days"
      summary: "Finds unique LeaveDays by employee and leave date"
      description: ""
      operationId: "findLeaveDaysByDate"
      produces:
      - "application/json"
      parameters:
      - name: "employeeId"
        in: "path"
        description: "Employee id to filter by"
        required: true
        type: "integer"
      - name: "leave_date"
        in: "path"
        description: "Leave date to filter by"
        required: true
        type: "string"
        format: "date"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/LeaveDays"
        400:
          description: "Invalid name supplied"
          schema:
            $ref: "#/definitions/ApiResponse"
        404:
          description: "LeaveDays not found"
          schema:
            $ref: "#/definitions/ApiResponse"
  /employee/{employeeId}/leave_days/:
    get:
      tags:
      - "leave_days"
      summary: "Finds LeaveDays by employee"
      description: ""
      operationId: "findEmployeeLeaveDays"
      produces:
      - "application/json"
      parameters:
      - name: "employeeId"
        in: "path"
        description: "Employee id to filter by"
        required: true
        type: "integer"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/LeaveDays"
        404:
          description: "Employee not found"
          schema:
            $ref: "#/definitions/ApiResponse"
  /employee/leave_days/{id}:
    get:
      tags:
      - "leave_days"
      summary: "Find LeaveDays by ID"
      description: "Returns a single LeaveDays."
      operationId: "getLeaveDaysById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of LeaveDays to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/LeaveDays"
        400:
          description: "Invalid ID supplied"
          schema:
            $ref: "#/definitions/ApiResponse"
        404:
          description: "LeaveDays not found"
          schema:
            $ref: "#/definitions/ApiResponse"
    put:
      tags:
      - "leave_days"
      summary: "Updates a LeaveDays in the system with form data. Role write:leave_days must be granted"
      description: ""
      operationId: "updateLeaveDaysById"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of LeaveDays to return"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "LeaveDays object that needs to be updated in the system"
        required: true
        schema:
          $ref: "#/definitions/LeaveDays"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/LeaveDays"
        400:
          description: "Invalid ID supplied"
          schema:
            $ref: "#/definitions/ApiResponse"
        404:
          description: "LeaveDays not found"
          schema:
            $ref: "#/definitions/ApiResponse"
        405:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/ApiResponse"
        409:
          description: "LeaveDays already exists conflict or rules conflict"
          schema:
            $ref: "#/definitions/ApiResponse"
        403: 
          description: 'Forbidden'
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - Bearer: []
    delete:
      tags:
      - "leave_days"
      summary: "Deletes a LeaveDays. Role write:leave_days must be granteds"
      description: ""
      operationId: "deleteLeaveDays"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "LeaveDays id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "Successful deletion"
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: "Invalid ID supplied"
          schema:
            $ref: "#/definitions/ApiResponse"
        404:
          description: "LeaveDays not found"
          schema:
            $ref: "#/definitions/ApiResponse"
        403: 
          description: 'Forbidden'
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - Bearer: []
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "Role write:users role must be granted"
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/User"
        409:
          description: "User already exists conflict"
          schema:
            $ref: "#/definitions/ApiResponse"
        403: 
          description: 'Forbidden'
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - Bearer: []
  /user/authenticate:
    get:
      tags:
      - "user"
      summary: "Generates token for an user"
      description: ""
      operationId: "authenticateUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
        400:
          description: "Invalid username/password supplied"
          schema:
            $ref: "#/definitions/ApiResponse"
  /user/:
    get:
      tags:
      - "user"
      summary: "Gets user by user name. Role read:users role must be granted"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The name of user that needs to be fetched. "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
          schema:
            $ref: "#/definitions/ApiResponse"
        404:
          description: "User not found"
          schema:
            $ref: "#/definitions/ApiResponse"
        403: 
          description: 'Forbidden'
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - Bearer: []
  /user/{id}:
    get:
      tags:
      - "user"
      summary: "Gets user by id. Role read:users role must be granted"
      description: ""
      operationId: "getUserById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The id of user that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
          schema:
            $ref: "#/definitions/ApiResponse"
        404:
          description: "User not found"
          schema:
            $ref: "#/definitions/ApiResponse"
        403: 
          description: 'Forbidden'
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - Bearer: []
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by with write:users role."
      operationId: "updateUser"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The id of user that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid user supplied"
          schema:
            $ref: "#/definitions/ApiResponse"
        404:
          description: "User not found"
          schema:
            $ref: "#/definitions/ApiResponse"
        403: 
          description: 'Forbidden'
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - Bearer: []
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done with write:users role."
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The id of user that needs to be deleted"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "Successful deletion"
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: "Invalid username supplied"
          schema:
            $ref: "#/definitions/ApiResponse"
        404:
          description: "User not found"
          schema:
            $ref: "#/definitions/ApiResponse"
        403: 
          description: 'Forbidden'
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - Bearer: []
  /user/findBy:
    get:
      tags:
      - "user"
      summary: "Finds users by given parameters. Role read:users role must be granted"
      description: ""
      operationId: "findBy"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The username to filter by. "
        type: "string"
      - name: "email"
        in: "query"
        description: "The email to filter by. "
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        403: 
          description: 'Forbidden'
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - Bearer: []
securityDefinitions:
  Bearer:
    type: "apiKey"
    name: "Authorization"
    in: "header"
definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
        example: "user"
      email:
        type: "string"
        example: "user@mail.com"
      password:
        type: "string"
        example: "123qwe"
      roles:
        type: "string"
        example: "write:employees"
    xml:
      name: "User"
  Team:
    type: "object"
    required:
    - "name"
    properties:
      team_id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "Alpha"
    xml:
      name: "Team"
  Employee:
    type: "object"
    required:
    - "full_name"
    - "position"
    - "team_id"
    - "expert"
    - "email"
    properties:
      employee_id:
        type: "integer"
        format: "int64"
      full_name:
        type: "string"
        example: "Joe Smith"
      position:
        type: "string"
        description: "Employee position"
        enum:
        - "junior engineer"
        - "senior engineer"
        - "chief engineer"
        - "team leader"
      specialization:
        type: "string"
        description: "Employee specialization, comma separated value form set(BA, OACI, O365, Core)"
        example: "Core"
      team_id:
        type: "integer"
        format: "int32"
        example: "1"
      expert:
        type: "boolean"
      email:
        type: "string"
        example: "joe@mail.com"
    xml:
      name: "Employee"
  EmployeeEx:
    type: "object"
    required:
    - "leave_days_total"
    - "leave_days_left"
    allOf:
    - $ref: '#/definitions/Employee'
    properties:
      leave_days_total:
        type: integer
        format: int32
      leave_days_left:
        type: integer
        format: int32
    xml:
      name: "EmployeeEx"
  TotalDays:
    type: "object"
    required:
    - "employee_id"
    - "total_days"
    - "year"
    properties:
      id:
        type: "integer"
        format: "int64"
      employee_id:
        type: "integer"
        format: "int64"
      total_days:
        type: "integer"
        format: "int32"
        example: "20"
      year:
        type: "integer"
        format: "int32"
        example: "2020"
  LeaveDays:
    type: "object"
    required:
    - "employee_id"
    - "leave_days"
    - "start_date"
    - "end_date"
    properties:
      id:
        type: "integer"
        format: "int64"
      employee_id:
        type: "integer"
        format: "int64"
      leave_days:
        type: "integer"
        format: "int32"
        example: "5"
      start_date:
        type: "string"
        format: "date"
        example: "2020-01-20"
      end_date:
        type: "string"
        format: "date"
        example: "2020-01-26"
  LeaveDaysEx:
    type: "object"
    allOf:
    - $ref: '#/definitions/LeaveDays'
    required:
    - "employee"
    properties:
      employee:
        $ref: "#/definitions/Employee"
  ConflictDetail:
    type: "object"
    required:
    - "rule"
    - "conflict_with_leave_days"
    properties:
      rule:
        type: "string"
      conflict_with_leave_days:
        type: "array"
        items:
          $ref: "#/definitions/LeaveDaysEx"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
  ApiResponseConflict:
    type: "object"
    allOf:
    - $ref: '#/definitions/ApiResponse'
    required:
    - "details"
    properties:
      details:
        type: "array"
        items:
          $ref: "#/definitions/ConflictDetail"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
