swagger: "2.0"
info:
  description: "This is Vacarion Calendar API description"
  version: "1.0.0"
  title: "Swagger Vacation calendar"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "w.kostyukova@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
    host: "localhost:8080"
basePath: "/vcalendar"
tags:
- name: "employee"
  description: "Employee management"
- name: "user"
  description: "User management"
schemes:
- "https"
- "http"
paths:
  /employee:
    post:
      tags:
      - "employee"
      summary: "Add a new employee to the system. Role write:employees must be granted"
      description: ""
      operationId: "addEmployee"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Employee object that needs to be added to the system"
        required: true
        schema:
          $ref: "#/definitions/Employee"
      responses:
        405:
          description: "Invalid input"
      security:
      - Bearer: []
    put:
      tags:
      - "employee"
      summary: "Update an existing employee. Role write:employees must be granted"
      description: ""
      operationId: "updateEmployee"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Employee object that needs to be added to the system"
        required: true
        schema:
          $ref: "#/definitions/Employee"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Employee not found"
        405:
          description: "Validation exception"
      security:
      - Bearer: []
  /employee/findAll:
    get:
      tags:
      - "employee"
      summary: "Returns all Employees registered in the system."
      description: ""
      operationId: "findAll"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Employee"
  /employee/findByTeamNumber:
    get:
      tags:
      - "employee"
      summary: "Finds Employees by given team number. Role read:employees must be granted"
      description: ""
      operationId: "findEmployeesByTeamNumber"
      produces:
      - "application/json"
      parameters:
      - name: "teamNumber"
        in: "query"
        description: "Team number to filter by"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Employee"
        400:
          description: "Invalid team number value"
  /employee/{employeeId}:
    get:
      tags:
      - "employee"
      summary: "Find employee by ID"
      description: "Returns a single employee."
      operationId: "getEmployeeById"
      produces:
      - "application/json"
      parameters:
      - name: "employeeId"
        in: "path"
        description: "ID of empoyee to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Employee"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Employee not found"
    post:
      tags:
      - "employee"
      summary: "Updates an employee in the system with form data. Role write:employees must be granted"
      description: ""
      operationId: "updateEmployeeById"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "employeeId"
        in: "path"
        description: "ID of employee that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "full_name"
        in: "formData"
        description: "Updated full name of the employee"
        required: false
        type: "string"
      - name: "position"
        in: "formData"
        description: "Updated position of the employee"
        required: false
        type: "string"
      responses:
        405:
          description: "Invalid input"
      security:
      - Bearer: []
    delete:
      tags:
      - "employee"
      summary: "Deletes an employee"
      description: ""
      operationId: "deleteEmployee"
      produces:
      - "application/json"
      parameters:
      - name: "employeeId"
        in: "path"
        description: "Employee id to delete. Role write:employees must be granted"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Employee not found"
      security:
      - Bearer: []
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "Role write:users role must be granted"
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
      security:
      - Bearer: []
  /user/authenticate:
    get:
      tags:
      - "user"
      summary: "Generates token for user"
      description: ""
      operationId: "authenticateUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
        400:
          description: "Invalid username/password supplied"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name. Role read:users role must be granted"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
      security:
      - Bearer: []
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by with write:users role."
      operationId: "updateUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
      security:
      - Bearer: []
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done with write:users role."
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
      security:
      - Bearer: []
securityDefinitions:
  Bearer:
    type: "apiKey"
    name: "Authorization"
    in: "header"
definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
    xml:
      name: "User"
  Employee:
    type: "object"
    required:
    - "full_name"
    - "position"
    - "team_number"
    properties:
      id:
        type: "integer"
        format: "int64"
      full_name:
        type: "string"
        example: "doggie"
      position:
        type: "string"
        description: "Employee position"
        enum:
        - "junior engineer"
        - "senior engineer"
        - "chief engineer"
        - "team leader"
      specialization:
        type: "string"
        description: "Employee specialization"
        enum:
        - "BA"
        - "OACI"
        - "O365"
        - "Core"
      team_number:
        type: "integer"
        format: "int32"
      expert:
        type: "boolean"
      leave_days_total:
        type: integer
        format: int32
      leave_days_left:
        type: integer
        format: int32
    xml:
      name: "Employee"
  LeaveDays:
    type: "object"
    properties:
      leave_days:
        type: "integer"
        format: "int32"
      start_date:
        type: "string"
      end_date:
        type: "string"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
