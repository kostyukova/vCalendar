# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Employee(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, employee_id: int=None, full_name: str=None, position: str=None, specialization: str=None, team_id: int=None, expert: bool=None, email: str=None):  # noqa: E501
        """Employee - a model defined in Swagger

        :param employee_id: The employee_id of this Employee.  # noqa: E501
        :type employee_id: int
        :param full_name: The full_name of this Employee.  # noqa: E501
        :type full_name: str
        :param position: The position of this Employee.  # noqa: E501
        :type position: str
        :param specialization: The specialization of this Employee.  # noqa: E501
        :type specialization: str
        :param team_id: The team_id of this Employee.  # noqa: E501
        :type team_id: int
        :param expert: The expert of this Employee.  # noqa: E501
        :type expert: bool
        :param email: The email of this Employee.  # noqa: E501
        :type email: str
        """
        self.swagger_types = {
            'employee_id': int,
            'full_name': str,
            'position': str,
            'specialization': str,
            'team_id': int,
            'expert': bool,
            'email': str
        }

        self.attribute_map = {
            'employee_id': 'employee_id',
            'full_name': 'full_name',
            'position': 'position',
            'specialization': 'specialization',
            'team_id': 'team_id',
            'expert': 'expert',
            'email': 'email'
        }

        self._employee_id = employee_id
        self._full_name = full_name
        self._position = position
        self._specialization = specialization
        self._team_id = team_id
        self._expert = expert
        self._email = email

    @classmethod
    def from_dict(cls, dikt) -> 'Employee':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Employee of this Employee.  # noqa: E501
        :rtype: Employee
        """
        return util.deserialize_model(dikt, cls)

    @property
    def employee_id(self) -> int:
        """Gets the employee_id of this Employee.


        :return: The employee_id of this Employee.
        :rtype: int
        """
        return self._employee_id

    @employee_id.setter
    def employee_id(self, employee_id: int):
        """Sets the employee_id of this Employee.


        :param employee_id: The employee_id of this Employee.
        :type employee_id: int
        """

        self._employee_id = employee_id

    @property
    def full_name(self) -> str:
        """Gets the full_name of this Employee.


        :return: The full_name of this Employee.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name: str):
        """Sets the full_name of this Employee.


        :param full_name: The full_name of this Employee.
        :type full_name: str
        """
        if full_name is None:
            raise ValueError("Invalid value for `full_name`, must not be `None`")  # noqa: E501

        self._full_name = full_name

    @property
    def position(self) -> str:
        """Gets the position of this Employee.

        Employee position  # noqa: E501

        :return: The position of this Employee.
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position: str):
        """Sets the position of this Employee.

        Employee position  # noqa: E501

        :param position: The position of this Employee.
        :type position: str
        """
        allowed_values = ["junior engineer", "senior engineer", "chief engineer", "team leader"]  # noqa: E501
        if position not in allowed_values:
            raise ValueError(
                "Invalid value for `position` ({0}), must be one of {1}"
                .format(position, allowed_values)
            )

        self._position = position

    @property
    def specialization(self) -> str:
        """Gets the specialization of this Employee.

        Employee specialization, comma separated value form set(BA, OACI, O365, Core)  # noqa: E501

        :return: The specialization of this Employee.
        :rtype: str
        """
        return self._specialization

    @specialization.setter
    def specialization(self, specialization: str):
        """Sets the specialization of this Employee.

        Employee specialization, comma separated value form set(BA, OACI, O365, Core)  # noqa: E501

        :param specialization: The specialization of this Employee.
        :type specialization: str
        """

        self._specialization = specialization

    @property
    def team_id(self) -> int:
        """Gets the team_id of this Employee.


        :return: The team_id of this Employee.
        :rtype: int
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id: int):
        """Sets the team_id of this Employee.


        :param team_id: The team_id of this Employee.
        :type team_id: int
        """
        if team_id is None:
            raise ValueError("Invalid value for `team_id`, must not be `None`")  # noqa: E501

        self._team_id = team_id

    @property
    def expert(self) -> bool:
        """Gets the expert of this Employee.


        :return: The expert of this Employee.
        :rtype: bool
        """
        return self._expert

    @expert.setter
    def expert(self, expert: bool):
        """Sets the expert of this Employee.


        :param expert: The expert of this Employee.
        :type expert: bool
        """
        if expert is None:
            raise ValueError("Invalid value for `expert`, must not be `None`")  # noqa: E501

        self._expert = expert

    @property
    def email(self) -> str:
        """Gets the email of this Employee.


        :return: The email of this Employee.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this Employee.


        :param email: The email of this Employee.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email
