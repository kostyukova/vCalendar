# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util
from swagger_server.models.leave_days_ex import LeaveDaysEx


class ConflictDetail(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, rule: str=None, conflict_with_leave_days: List[LeaveDaysEx]=None):  # noqa: E501
        """ConflictDetail - a model defined in Swagger

        :param rule: The rule of this ConflictDetail.  # noqa: E501
        :type rule: str
        :param conflict_with_leave_days: The conflict_with_leave_days of this ConflictDetail.  # noqa: E501
        :type conflict_with_leave_days: List[LeaveDaysEx]
        """
        self.swagger_types = {
            'rule': str,
            'conflict_with_leave_days': List[LeaveDaysEx]
        }

        self.attribute_map = {
            'rule': 'rule',
            'conflict_with_leave_days': 'conflict_with_leave_days'
        }

        self._rule = rule
        self._conflict_with_leave_days = conflict_with_leave_days

    @classmethod
    def from_dict(cls, dikt) -> 'ConflictDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ConflictDetail of this ConflictDetail.  # noqa: E501
        :rtype: ConflictDetail
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rule(self) -> str:
        """Gets the rule of this ConflictDetail.


        :return: The rule of this ConflictDetail.
        :rtype: str
        """
        return self._rule

    @rule.setter
    def rule(self, rule: str):
        """Sets the rule of this ConflictDetail.


        :param rule: The rule of this ConflictDetail.
        :type rule: str
        """
        if rule is None:
            raise ValueError("Invalid value for `rule`, must not be `None`")  # noqa: E501

        self._rule = rule

    @property
    def conflict_with_leave_days(self) -> List[LeaveDaysEx]:
        """Gets the conflict_with_leave_days of this ConflictDetail.


        :return: The conflict_with_leave_days of this ConflictDetail.
        :rtype: List[LeaveDaysEx]
        """
        return self._conflict_with_leave_days

    @conflict_with_leave_days.setter
    def conflict_with_leave_days(self, conflict_with_leave_days: List[LeaveDaysEx]):
        """Sets the conflict_with_leave_days of this ConflictDetail.


        :param conflict_with_leave_days: The conflict_with_leave_days of this ConflictDetail.
        :type conflict_with_leave_days: List[LeaveDaysEx]
        """
        if conflict_with_leave_days is None:
            raise ValueError("Invalid value for `conflict_with_leave_days`, must not be `None`")  # noqa: E501

        self._conflict_with_leave_days = conflict_with_leave_days
