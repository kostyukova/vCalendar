# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class TotalDays(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, employee_id: int=None, total_days: int=None, year: int=None):  # noqa: E501
        """TotalDays - a model defined in Swagger

        :param id: The id of this TotalDays.  # noqa: E501
        :type id: int
        :param employee_id: The employee_id of this TotalDays.  # noqa: E501
        :type employee_id: int
        :param total_days: The total_days of this TotalDays.  # noqa: E501
        :type total_days: int
        :param year: The year of this TotalDays.  # noqa: E501
        :type year: int
        """
        self.swagger_types = {
            'id': int,
            'employee_id': int,
            'total_days': int,
            'year': int
        }

        self.attribute_map = {
            'id': 'id',
            'employee_id': 'employee_id',
            'total_days': 'total_days',
            'year': 'year'
        }

        self._id = id
        self._employee_id = employee_id
        self._total_days = total_days
        self._year = year

    @classmethod
    def from_dict(cls, dikt) -> 'TotalDays':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TotalDays of this TotalDays.  # noqa: E501
        :rtype: TotalDays
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this TotalDays.


        :return: The id of this TotalDays.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this TotalDays.


        :param id: The id of this TotalDays.
        :type id: int
        """

        self._id = id

    @property
    def employee_id(self) -> int:
        """Gets the employee_id of this TotalDays.


        :return: The employee_id of this TotalDays.
        :rtype: int
        """
        return self._employee_id

    @employee_id.setter
    def employee_id(self, employee_id: int):
        """Sets the employee_id of this TotalDays.


        :param employee_id: The employee_id of this TotalDays.
        :type employee_id: int
        """
        if employee_id is None:
            raise ValueError("Invalid value for `employee_id`, must not be `None`")  # noqa: E501

        self._employee_id = employee_id

    @property
    def total_days(self) -> int:
        """Gets the total_days of this TotalDays.


        :return: The total_days of this TotalDays.
        :rtype: int
        """
        return self._total_days

    @total_days.setter
    def total_days(self, total_days: int):
        """Sets the total_days of this TotalDays.


        :param total_days: The total_days of this TotalDays.
        :type total_days: int
        """
        if total_days is None:
            raise ValueError("Invalid value for `total_days`, must not be `None`")  # noqa: E501

        self._total_days = total_days

    @property
    def year(self) -> int:
        """Gets the year of this TotalDays.


        :return: The year of this TotalDays.
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year: int):
        """Sets the year of this TotalDays.


        :param year: The year of this TotalDays.
        :type year: int
        """
        if year is None:
            raise ValueError("Invalid value for `year`, must not be `None`")  # noqa: E501

        self._year = year
